'''
build_features.py is used to do feature extractions and will return a dataframe for model training.
'''
## import library
import pandas as pd
import os
import sys
from datetime import datetime
import numpy as np
from scipy.signal import find_peaks
from sklearn.metrics import accuracy_score
import sklearn.model_selection as model_selection
from scipy import signal


def extract_valid_package_rate(entries,raw_path):
    '''
    return the valid package rate feature for each network-stats record.
    
    :param: entries: a list contains all names of network-stats records.
    :param: raw_path: file directory where raw data stored.
    '''
    feature = []
    for i in entries:
        temp = raw_path +"/"+ i
        file = pd.read_csv(temp, index_col=0).reset_index()
        group_file = file.groupby("Time").sum().reset_index()
        vpr = (len(group_file)-1)/(group_file["Time"][len(group_file)-1]-group_file["Time"][0])
        feature.append(vpr)
    return feature

def extract_peaks_gap(entries,raw_path):
    '''
    return the peaks gap feature for each network-stats record.
    
    :param: entries: a list contains all names of network-stats records.
    :param: raw_path: file directory where raw data stored.
    '''
    feature = []
    for i in entries:
        temp = raw_path +"/"+ i
        file = pd.read_csv(temp, index_col=0).reset_index()
        peaks, _ = find_peaks(file['2->1Bytes'], height=np.mean(file['2->1Bytes']))
        lst = file["Time"][peaks]
        gap = 0
        for i in range(len(lst)-1):
            sub = lst.iloc[i+1] - lst.iloc[i] - 1
            gap = sub + gap
        feature.append(gap)
    return feature

def extract_peaks_number(entries,raw_path):
    '''
    return the peak number feature for each network-stats record.
    
    :param: entries: a list contains all names of network-stats records.
    :param: raw_path: file directory where raw data stored.
    '''
    feature = []
    for i in entries:
        temp = raw_path +"/"+ i
        file = pd.read_csv(temp, index_col=0).reset_index()
        peaks, _ = find_peaks(file['2->1Bytes'], height=np.mean(file['2->1Bytes']))
        feature.append(len(peaks))
    return feature

def extract_max_prominence(entries,raw_path):
    '''
    return the max prominence feature for each network-stats record.
    
    :param: entries: a list contains all names of network-stats records.
    :param: raw_path: file directory where raw data stored.
    '''
    max_prominence_feature=[]
    for i in entries:
        temp = raw_path +"/"+ i
        df=pd.read_csv(temp, index_col=0).reset_index()
        df_temp = df[['Time', '2->1Bytes']].set_index('Time')
        df_temp.index = pd.to_datetime(df_temp.index,unit='s')
        df_temp = df_temp.resample('500ms').sum()
        mean1 = df_temp['2->1Bytes'].mean()
        s = df_temp['2->1Bytes'] - mean1
        s.loc[s < 0] = 0
        fs = 2
        f, Pxx_den = signal.welch(s, fs, nperseg=len(s))
        peaks, properties = signal.find_peaks(np.sqrt(Pxx_den), prominence=1)
        max_prominence = properties['prominences'].max()
        #appends the created value to feature list
        max_prominence_feature.append(max_prominence)
    return max_prominence_feature

def features_build(indir,outdir,output):
    '''
    return a table to outdir contains features from all records generated by network-stats from indir.
    :param: indir: file directory where raw data stored
    :param: outdir: file directory where generated data stored
    :param: output: whether this function output the table as a csv file or not, 1 means output, 0 means not
    '''
    entries = os.listdir(indir)
    features_name = ["valid_package_rate","peaks_gap","peaks_number","max_prominence"]
    feat1 = extract_valid_package_rate(entries,indir)
    feat2 = extract_peaks_gap(entries,indir)
    feat3 = extract_peaks_number(entries,indir)
    feat4 = extract_max_prominence(entries,indir)
    label = []
    for i in entries:
        if "live" in i:
            label.append(1)
        if "streaming" in i:
            label.append(0)
    data_tuples = list(zip(feat1,feat2,feat3,feat4,label))
    tab = pd.DataFrame(data_tuples, columns=['valid_package_rate','peaks_gap','peaks_number',"max_prominence",'data_label'])
    tab["valid_package_rate"] = tab["valid_package_rate"].fillna(1)
    if output == 1:
        tab.to_csv (outdir+'/features.csv', index = False, header=True)
    else:
        return tab

